{"ast":null,"code":"let socket;\nlet connected = false;\nexport const connectWebSocket = cb => {\n  if (connected) return;\n  console.log('Connecting to WebSocket');\n  socket = new WebSocket('ws://localhost:8080/ws');\n  socket.onopen = () => {\n    console.log('WebSocket connection established');\n    connected = true;\n  };\n  socket.onclose = () => {\n    console.log('WebSocket connection closed');\n    connected = false;\n  };\n  socket.onmessage = message => {\n    const parsedMessage = JSON.parse(message.data);\n    console.log('Received message:', parsedMessage);\n    cb(parsedMessage);\n  };\n  socket.onerror = error => {\n    console.error('WebSocket error:', error);\n  };\n};\nexport const sendMessage = message => {\n  if (socket && connected) {\n    socket.send(message);\n  } else {\n    console.error('Cannot send message, socket not connected');\n  }\n};\nexport const disconnectWebSocket = () => {\n  if (socket) {\n    socket.close();\n    connected = false;\n  }\n};","map":{"version":3,"names":["socket","connected","connectWebSocket","cb","console","log","WebSocket","onopen","onclose","onmessage","message","parsedMessage","JSON","parse","data","onerror","error","sendMessage","send","disconnectWebSocket","close"],"sources":["/Users/laithassaf/Documents/go_chat_app/frontend/src/services/websocket.js"],"sourcesContent":["let socket;\nlet connected = false;\n\nexport const connectWebSocket = (cb) => {\n  if (connected) return;\n  \n  console.log('Connecting to WebSocket');\n  socket = new WebSocket('ws://localhost:8080/ws');\n  \n  socket.onopen = () => {\n    console.log('WebSocket connection established');\n    connected = true;\n  };\n  \n  socket.onclose = () => {\n    console.log('WebSocket connection closed');\n    connected = false;\n  };\n  \n  socket.onmessage = (message) => {\n    const parsedMessage = JSON.parse(message.data);\n    console.log('Received message:', parsedMessage);\n    cb(parsedMessage);\n  };\n  \n  socket.onerror = (error) => {\n    console.error('WebSocket error:', error);\n  };\n};\n\nexport const sendMessage = (message) => {\n  if (socket && connected) {\n    socket.send(message);\n  } else {\n    console.error('Cannot send message, socket not connected');\n  }\n};\n\nexport const disconnectWebSocket = () => {\n  if (socket) {\n    socket.close();\n    connected = false;\n  }\n};"],"mappings":"AAAA,IAAIA,MAAM;AACV,IAAIC,SAAS,GAAG,KAAK;AAErB,OAAO,MAAMC,gBAAgB,GAAIC,EAAE,IAAK;EACtC,IAAIF,SAAS,EAAE;EAEfG,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;EACtCL,MAAM,GAAG,IAAIM,SAAS,CAAC,wBAAwB,CAAC;EAEhDN,MAAM,CAACO,MAAM,GAAG,MAAM;IACpBH,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;IAC/CJ,SAAS,GAAG,IAAI;EAClB,CAAC;EAEDD,MAAM,CAACQ,OAAO,GAAG,MAAM;IACrBJ,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1CJ,SAAS,GAAG,KAAK;EACnB,CAAC;EAEDD,MAAM,CAACS,SAAS,GAAIC,OAAO,IAAK;IAC9B,MAAMC,aAAa,GAAGC,IAAI,CAACC,KAAK,CAACH,OAAO,CAACI,IAAI,CAAC;IAC9CV,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEM,aAAa,CAAC;IAC/CR,EAAE,CAACQ,aAAa,CAAC;EACnB,CAAC;EAEDX,MAAM,CAACe,OAAO,GAAIC,KAAK,IAAK;IAC1BZ,OAAO,CAACY,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;EAC1C,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,WAAW,GAAIP,OAAO,IAAK;EACtC,IAAIV,MAAM,IAAIC,SAAS,EAAE;IACvBD,MAAM,CAACkB,IAAI,CAACR,OAAO,CAAC;EACtB,CAAC,MAAM;IACLN,OAAO,CAACY,KAAK,CAAC,2CAA2C,CAAC;EAC5D;AACF,CAAC;AAED,OAAO,MAAMG,mBAAmB,GAAGA,CAAA,KAAM;EACvC,IAAInB,MAAM,EAAE;IACVA,MAAM,CAACoB,KAAK,CAAC,CAAC;IACdnB,SAAS,GAAG,KAAK;EACnB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}